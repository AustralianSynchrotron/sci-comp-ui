/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutStackRouteImport } from './routes/layout/stack'
import { Route as LayoutSheetRouteImport } from './routes/layout/sheet'
import { Route as LayoutGridRouteImport } from './routes/layout/grid'
import { Route as LayoutCollapsibleRouteImport } from './routes/layout/collapsible'
import { Route as LayoutCardRouteImport } from './routes/layout/card'
import { Route as LayoutBoxRouteImport } from './routes/layout/box'
import { Route as LayoutAccordionRouteImport } from './routes/layout/accordion'
import { Route as ExperimentalUnitsFieldRouteImport } from './routes/experimental/units-field'
import { Route as ExperimentalTextLogRouteImport } from './routes/experimental/text-log'
import { Route as ExperimentalPrefectFlowTableRouteImport } from './routes/experimental/prefect-flow-table'
import { Route as ExperimentalPeriodicTableRouteImport } from './routes/experimental/periodic-table'
import { Route as ExperimentalOphydControlRouteImport } from './routes/experimental/ophyd-control'
import { Route as ExperimentalCameraControlRouteImport } from './routes/experimental/camera-control'
import { Route as ExperimentalBeamBlockersControlRouteImport } from './routes/experimental/beam-blockers-control'
import { Route as ElementsTypographyRouteImport } from './routes/elements/typography'
import { Route as ElementsTooltipRouteImport } from './routes/elements/tooltip'
import { Route as ElementsToasterRouteImport } from './routes/elements/toaster'
import { Route as ElementsSwitchRouteImport } from './routes/elements/switch'
import { Route as ElementsSparkLineRouteImport } from './routes/elements/spark-line'
import { Route as ElementsSliderRouteImport } from './routes/elements/slider'
import { Route as ElementsSelectRouteImport } from './routes/elements/select'
import { Route as ElementsProgressRouteImport } from './routes/elements/progress'
import { Route as ElementsInputRouteImport } from './routes/elements/input'
import { Route as ElementsCheckboxRouteImport } from './routes/elements/checkbox'
import { Route as ElementsButtonRouteImport } from './routes/elements/button'
import { Route as ElementsBreadcrumbRouteImport } from './routes/elements/breadcrumb'
import { Route as ElementsBadgeRouteImport } from './routes/elements/badge'
import { Route as DocsZodPydanticAnalogyRouteImport } from './routes/docs/zod-pydantic-analogy'
import { Route as DocsMuiMigrationRouteImport } from './routes/docs/mui-migration'
import { Route as DocsGettingStartedRouteImport } from './routes/docs/getting-started'
import { Route as DocsComponentCreationRouteImport } from './routes/docs/component-creation'
import { Route as ComponentsRadioGroupRouteImport } from './routes/components/radio-group'
import { Route as ComponentsOphydMonitorRouteImport } from './routes/components/ophyd-monitor'
import { Route as ComponentsFormRouteImport } from './routes/components/form'
import { Route as ComponentsCodeBlockRouteImport } from './routes/components/code-block'
import { Route as ComponentsChartXyRouteImport } from './routes/components/chart-xy'
import { Route as ComponentsChartHistogramRouteImport } from './routes/components/chart-histogram'
import { Route as ComponentsChartBarRouteImport } from './routes/components/chart-bar'
import { Route as ComponentsCalendarRouteImport } from './routes/components/calendar'
import { Route as ComponentsAlertDialogRouteImport } from './routes/components/alert-dialog'
import { Route as ComponentsAlertRouteImport } from './routes/components/alert'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutStackRoute = LayoutStackRouteImport.update({
  id: '/layout/stack',
  path: '/layout/stack',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSheetRoute = LayoutSheetRouteImport.update({
  id: '/layout/sheet',
  path: '/layout/sheet',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutGridRoute = LayoutGridRouteImport.update({
  id: '/layout/grid',
  path: '/layout/grid',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutCollapsibleRoute = LayoutCollapsibleRouteImport.update({
  id: '/layout/collapsible',
  path: '/layout/collapsible',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutCardRoute = LayoutCardRouteImport.update({
  id: '/layout/card',
  path: '/layout/card',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutBoxRoute = LayoutBoxRouteImport.update({
  id: '/layout/box',
  path: '/layout/box',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutAccordionRoute = LayoutAccordionRouteImport.update({
  id: '/layout/accordion',
  path: '/layout/accordion',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperimentalUnitsFieldRoute = ExperimentalUnitsFieldRouteImport.update({
  id: '/experimental/units-field',
  path: '/experimental/units-field',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperimentalTextLogRoute = ExperimentalTextLogRouteImport.update({
  id: '/experimental/text-log',
  path: '/experimental/text-log',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperimentalPrefectFlowTableRoute =
  ExperimentalPrefectFlowTableRouteImport.update({
    id: '/experimental/prefect-flow-table',
    path: '/experimental/prefect-flow-table',
    getParentRoute: () => rootRouteImport,
  } as any)
const ExperimentalPeriodicTableRoute =
  ExperimentalPeriodicTableRouteImport.update({
    id: '/experimental/periodic-table',
    path: '/experimental/periodic-table',
    getParentRoute: () => rootRouteImport,
  } as any)
const ExperimentalOphydControlRoute =
  ExperimentalOphydControlRouteImport.update({
    id: '/experimental/ophyd-control',
    path: '/experimental/ophyd-control',
    getParentRoute: () => rootRouteImport,
  } as any)
const ExperimentalCameraControlRoute =
  ExperimentalCameraControlRouteImport.update({
    id: '/experimental/camera-control',
    path: '/experimental/camera-control',
    getParentRoute: () => rootRouteImport,
  } as any)
const ExperimentalBeamBlockersControlRoute =
  ExperimentalBeamBlockersControlRouteImport.update({
    id: '/experimental/beam-blockers-control',
    path: '/experimental/beam-blockers-control',
    getParentRoute: () => rootRouteImport,
  } as any)
const ElementsTypographyRoute = ElementsTypographyRouteImport.update({
  id: '/elements/typography',
  path: '/elements/typography',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsTooltipRoute = ElementsTooltipRouteImport.update({
  id: '/elements/tooltip',
  path: '/elements/tooltip',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsToasterRoute = ElementsToasterRouteImport.update({
  id: '/elements/toaster',
  path: '/elements/toaster',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsSwitchRoute = ElementsSwitchRouteImport.update({
  id: '/elements/switch',
  path: '/elements/switch',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsSparkLineRoute = ElementsSparkLineRouteImport.update({
  id: '/elements/spark-line',
  path: '/elements/spark-line',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsSliderRoute = ElementsSliderRouteImport.update({
  id: '/elements/slider',
  path: '/elements/slider',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsSelectRoute = ElementsSelectRouteImport.update({
  id: '/elements/select',
  path: '/elements/select',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsProgressRoute = ElementsProgressRouteImport.update({
  id: '/elements/progress',
  path: '/elements/progress',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsInputRoute = ElementsInputRouteImport.update({
  id: '/elements/input',
  path: '/elements/input',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsCheckboxRoute = ElementsCheckboxRouteImport.update({
  id: '/elements/checkbox',
  path: '/elements/checkbox',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsButtonRoute = ElementsButtonRouteImport.update({
  id: '/elements/button',
  path: '/elements/button',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsBreadcrumbRoute = ElementsBreadcrumbRouteImport.update({
  id: '/elements/breadcrumb',
  path: '/elements/breadcrumb',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsBadgeRoute = ElementsBadgeRouteImport.update({
  id: '/elements/badge',
  path: '/elements/badge',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsZodPydanticAnalogyRoute = DocsZodPydanticAnalogyRouteImport.update({
  id: '/docs/zod-pydantic-analogy',
  path: '/docs/zod-pydantic-analogy',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsMuiMigrationRoute = DocsMuiMigrationRouteImport.update({
  id: '/docs/mui-migration',
  path: '/docs/mui-migration',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsGettingStartedRoute = DocsGettingStartedRouteImport.update({
  id: '/docs/getting-started',
  path: '/docs/getting-started',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsComponentCreationRoute = DocsComponentCreationRouteImport.update({
  id: '/docs/component-creation',
  path: '/docs/component-creation',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsRadioGroupRoute = ComponentsRadioGroupRouteImport.update({
  id: '/components/radio-group',
  path: '/components/radio-group',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsOphydMonitorRoute = ComponentsOphydMonitorRouteImport.update({
  id: '/components/ophyd-monitor',
  path: '/components/ophyd-monitor',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsFormRoute = ComponentsFormRouteImport.update({
  id: '/components/form',
  path: '/components/form',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsCodeBlockRoute = ComponentsCodeBlockRouteImport.update({
  id: '/components/code-block',
  path: '/components/code-block',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsChartXyRoute = ComponentsChartXyRouteImport.update({
  id: '/components/chart-xy',
  path: '/components/chart-xy',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsChartHistogramRoute =
  ComponentsChartHistogramRouteImport.update({
    id: '/components/chart-histogram',
    path: '/components/chart-histogram',
    getParentRoute: () => rootRouteImport,
  } as any)
const ComponentsChartBarRoute = ComponentsChartBarRouteImport.update({
  id: '/components/chart-bar',
  path: '/components/chart-bar',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsCalendarRoute = ComponentsCalendarRouteImport.update({
  id: '/components/calendar',
  path: '/components/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsAlertDialogRoute = ComponentsAlertDialogRouteImport.update({
  id: '/components/alert-dialog',
  path: '/components/alert-dialog',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsAlertRoute = ComponentsAlertRouteImport.update({
  id: '/components/alert',
  path: '/components/alert',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/components/alert': typeof ComponentsAlertRoute
  '/components/alert-dialog': typeof ComponentsAlertDialogRoute
  '/components/calendar': typeof ComponentsCalendarRoute
  '/components/chart-bar': typeof ComponentsChartBarRoute
  '/components/chart-histogram': typeof ComponentsChartHistogramRoute
  '/components/chart-xy': typeof ComponentsChartXyRoute
  '/components/code-block': typeof ComponentsCodeBlockRoute
  '/components/form': typeof ComponentsFormRoute
  '/components/ophyd-monitor': typeof ComponentsOphydMonitorRoute
  '/components/radio-group': typeof ComponentsRadioGroupRoute
  '/docs/component-creation': typeof DocsComponentCreationRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/mui-migration': typeof DocsMuiMigrationRoute
  '/docs/zod-pydantic-analogy': typeof DocsZodPydanticAnalogyRoute
  '/elements/badge': typeof ElementsBadgeRoute
  '/elements/breadcrumb': typeof ElementsBreadcrumbRoute
  '/elements/button': typeof ElementsButtonRoute
  '/elements/checkbox': typeof ElementsCheckboxRoute
  '/elements/input': typeof ElementsInputRoute
  '/elements/progress': typeof ElementsProgressRoute
  '/elements/select': typeof ElementsSelectRoute
  '/elements/slider': typeof ElementsSliderRoute
  '/elements/spark-line': typeof ElementsSparkLineRoute
  '/elements/switch': typeof ElementsSwitchRoute
  '/elements/toaster': typeof ElementsToasterRoute
  '/elements/tooltip': typeof ElementsTooltipRoute
  '/elements/typography': typeof ElementsTypographyRoute
  '/experimental/beam-blockers-control': typeof ExperimentalBeamBlockersControlRoute
  '/experimental/camera-control': typeof ExperimentalCameraControlRoute
  '/experimental/ophyd-control': typeof ExperimentalOphydControlRoute
  '/experimental/periodic-table': typeof ExperimentalPeriodicTableRoute
  '/experimental/prefect-flow-table': typeof ExperimentalPrefectFlowTableRoute
  '/experimental/text-log': typeof ExperimentalTextLogRoute
  '/experimental/units-field': typeof ExperimentalUnitsFieldRoute
  '/layout/accordion': typeof LayoutAccordionRoute
  '/layout/box': typeof LayoutBoxRoute
  '/layout/card': typeof LayoutCardRoute
  '/layout/collapsible': typeof LayoutCollapsibleRoute
  '/layout/grid': typeof LayoutGridRoute
  '/layout/sheet': typeof LayoutSheetRoute
  '/layout/stack': typeof LayoutStackRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/components/alert': typeof ComponentsAlertRoute
  '/components/alert-dialog': typeof ComponentsAlertDialogRoute
  '/components/calendar': typeof ComponentsCalendarRoute
  '/components/chart-bar': typeof ComponentsChartBarRoute
  '/components/chart-histogram': typeof ComponentsChartHistogramRoute
  '/components/chart-xy': typeof ComponentsChartXyRoute
  '/components/code-block': typeof ComponentsCodeBlockRoute
  '/components/form': typeof ComponentsFormRoute
  '/components/ophyd-monitor': typeof ComponentsOphydMonitorRoute
  '/components/radio-group': typeof ComponentsRadioGroupRoute
  '/docs/component-creation': typeof DocsComponentCreationRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/mui-migration': typeof DocsMuiMigrationRoute
  '/docs/zod-pydantic-analogy': typeof DocsZodPydanticAnalogyRoute
  '/elements/badge': typeof ElementsBadgeRoute
  '/elements/breadcrumb': typeof ElementsBreadcrumbRoute
  '/elements/button': typeof ElementsButtonRoute
  '/elements/checkbox': typeof ElementsCheckboxRoute
  '/elements/input': typeof ElementsInputRoute
  '/elements/progress': typeof ElementsProgressRoute
  '/elements/select': typeof ElementsSelectRoute
  '/elements/slider': typeof ElementsSliderRoute
  '/elements/spark-line': typeof ElementsSparkLineRoute
  '/elements/switch': typeof ElementsSwitchRoute
  '/elements/toaster': typeof ElementsToasterRoute
  '/elements/tooltip': typeof ElementsTooltipRoute
  '/elements/typography': typeof ElementsTypographyRoute
  '/experimental/beam-blockers-control': typeof ExperimentalBeamBlockersControlRoute
  '/experimental/camera-control': typeof ExperimentalCameraControlRoute
  '/experimental/ophyd-control': typeof ExperimentalOphydControlRoute
  '/experimental/periodic-table': typeof ExperimentalPeriodicTableRoute
  '/experimental/prefect-flow-table': typeof ExperimentalPrefectFlowTableRoute
  '/experimental/text-log': typeof ExperimentalTextLogRoute
  '/experimental/units-field': typeof ExperimentalUnitsFieldRoute
  '/layout/accordion': typeof LayoutAccordionRoute
  '/layout/box': typeof LayoutBoxRoute
  '/layout/card': typeof LayoutCardRoute
  '/layout/collapsible': typeof LayoutCollapsibleRoute
  '/layout/grid': typeof LayoutGridRoute
  '/layout/sheet': typeof LayoutSheetRoute
  '/layout/stack': typeof LayoutStackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/components/alert': typeof ComponentsAlertRoute
  '/components/alert-dialog': typeof ComponentsAlertDialogRoute
  '/components/calendar': typeof ComponentsCalendarRoute
  '/components/chart-bar': typeof ComponentsChartBarRoute
  '/components/chart-histogram': typeof ComponentsChartHistogramRoute
  '/components/chart-xy': typeof ComponentsChartXyRoute
  '/components/code-block': typeof ComponentsCodeBlockRoute
  '/components/form': typeof ComponentsFormRoute
  '/components/ophyd-monitor': typeof ComponentsOphydMonitorRoute
  '/components/radio-group': typeof ComponentsRadioGroupRoute
  '/docs/component-creation': typeof DocsComponentCreationRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/mui-migration': typeof DocsMuiMigrationRoute
  '/docs/zod-pydantic-analogy': typeof DocsZodPydanticAnalogyRoute
  '/elements/badge': typeof ElementsBadgeRoute
  '/elements/breadcrumb': typeof ElementsBreadcrumbRoute
  '/elements/button': typeof ElementsButtonRoute
  '/elements/checkbox': typeof ElementsCheckboxRoute
  '/elements/input': typeof ElementsInputRoute
  '/elements/progress': typeof ElementsProgressRoute
  '/elements/select': typeof ElementsSelectRoute
  '/elements/slider': typeof ElementsSliderRoute
  '/elements/spark-line': typeof ElementsSparkLineRoute
  '/elements/switch': typeof ElementsSwitchRoute
  '/elements/toaster': typeof ElementsToasterRoute
  '/elements/tooltip': typeof ElementsTooltipRoute
  '/elements/typography': typeof ElementsTypographyRoute
  '/experimental/beam-blockers-control': typeof ExperimentalBeamBlockersControlRoute
  '/experimental/camera-control': typeof ExperimentalCameraControlRoute
  '/experimental/ophyd-control': typeof ExperimentalOphydControlRoute
  '/experimental/periodic-table': typeof ExperimentalPeriodicTableRoute
  '/experimental/prefect-flow-table': typeof ExperimentalPrefectFlowTableRoute
  '/experimental/text-log': typeof ExperimentalTextLogRoute
  '/experimental/units-field': typeof ExperimentalUnitsFieldRoute
  '/layout/accordion': typeof LayoutAccordionRoute
  '/layout/box': typeof LayoutBoxRoute
  '/layout/card': typeof LayoutCardRoute
  '/layout/collapsible': typeof LayoutCollapsibleRoute
  '/layout/grid': typeof LayoutGridRoute
  '/layout/sheet': typeof LayoutSheetRoute
  '/layout/stack': typeof LayoutStackRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/components/alert'
    | '/components/alert-dialog'
    | '/components/calendar'
    | '/components/chart-bar'
    | '/components/chart-histogram'
    | '/components/chart-xy'
    | '/components/code-block'
    | '/components/form'
    | '/components/ophyd-monitor'
    | '/components/radio-group'
    | '/docs/component-creation'
    | '/docs/getting-started'
    | '/docs/mui-migration'
    | '/docs/zod-pydantic-analogy'
    | '/elements/badge'
    | '/elements/breadcrumb'
    | '/elements/button'
    | '/elements/checkbox'
    | '/elements/input'
    | '/elements/progress'
    | '/elements/select'
    | '/elements/slider'
    | '/elements/spark-line'
    | '/elements/switch'
    | '/elements/toaster'
    | '/elements/tooltip'
    | '/elements/typography'
    | '/experimental/beam-blockers-control'
    | '/experimental/camera-control'
    | '/experimental/ophyd-control'
    | '/experimental/periodic-table'
    | '/experimental/prefect-flow-table'
    | '/experimental/text-log'
    | '/experimental/units-field'
    | '/layout/accordion'
    | '/layout/box'
    | '/layout/card'
    | '/layout/collapsible'
    | '/layout/grid'
    | '/layout/sheet'
    | '/layout/stack'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/components/alert'
    | '/components/alert-dialog'
    | '/components/calendar'
    | '/components/chart-bar'
    | '/components/chart-histogram'
    | '/components/chart-xy'
    | '/components/code-block'
    | '/components/form'
    | '/components/ophyd-monitor'
    | '/components/radio-group'
    | '/docs/component-creation'
    | '/docs/getting-started'
    | '/docs/mui-migration'
    | '/docs/zod-pydantic-analogy'
    | '/elements/badge'
    | '/elements/breadcrumb'
    | '/elements/button'
    | '/elements/checkbox'
    | '/elements/input'
    | '/elements/progress'
    | '/elements/select'
    | '/elements/slider'
    | '/elements/spark-line'
    | '/elements/switch'
    | '/elements/toaster'
    | '/elements/tooltip'
    | '/elements/typography'
    | '/experimental/beam-blockers-control'
    | '/experimental/camera-control'
    | '/experimental/ophyd-control'
    | '/experimental/periodic-table'
    | '/experimental/prefect-flow-table'
    | '/experimental/text-log'
    | '/experimental/units-field'
    | '/layout/accordion'
    | '/layout/box'
    | '/layout/card'
    | '/layout/collapsible'
    | '/layout/grid'
    | '/layout/sheet'
    | '/layout/stack'
  id:
    | '__root__'
    | '/'
    | '/components/alert'
    | '/components/alert-dialog'
    | '/components/calendar'
    | '/components/chart-bar'
    | '/components/chart-histogram'
    | '/components/chart-xy'
    | '/components/code-block'
    | '/components/form'
    | '/components/ophyd-monitor'
    | '/components/radio-group'
    | '/docs/component-creation'
    | '/docs/getting-started'
    | '/docs/mui-migration'
    | '/docs/zod-pydantic-analogy'
    | '/elements/badge'
    | '/elements/breadcrumb'
    | '/elements/button'
    | '/elements/checkbox'
    | '/elements/input'
    | '/elements/progress'
    | '/elements/select'
    | '/elements/slider'
    | '/elements/spark-line'
    | '/elements/switch'
    | '/elements/toaster'
    | '/elements/tooltip'
    | '/elements/typography'
    | '/experimental/beam-blockers-control'
    | '/experimental/camera-control'
    | '/experimental/ophyd-control'
    | '/experimental/periodic-table'
    | '/experimental/prefect-flow-table'
    | '/experimental/text-log'
    | '/experimental/units-field'
    | '/layout/accordion'
    | '/layout/box'
    | '/layout/card'
    | '/layout/collapsible'
    | '/layout/grid'
    | '/layout/sheet'
    | '/layout/stack'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComponentsAlertRoute: typeof ComponentsAlertRoute
  ComponentsAlertDialogRoute: typeof ComponentsAlertDialogRoute
  ComponentsCalendarRoute: typeof ComponentsCalendarRoute
  ComponentsChartBarRoute: typeof ComponentsChartBarRoute
  ComponentsChartHistogramRoute: typeof ComponentsChartHistogramRoute
  ComponentsChartXyRoute: typeof ComponentsChartXyRoute
  ComponentsCodeBlockRoute: typeof ComponentsCodeBlockRoute
  ComponentsFormRoute: typeof ComponentsFormRoute
  ComponentsOphydMonitorRoute: typeof ComponentsOphydMonitorRoute
  ComponentsRadioGroupRoute: typeof ComponentsRadioGroupRoute
  DocsComponentCreationRoute: typeof DocsComponentCreationRoute
  DocsGettingStartedRoute: typeof DocsGettingStartedRoute
  DocsMuiMigrationRoute: typeof DocsMuiMigrationRoute
  DocsZodPydanticAnalogyRoute: typeof DocsZodPydanticAnalogyRoute
  ElementsBadgeRoute: typeof ElementsBadgeRoute
  ElementsBreadcrumbRoute: typeof ElementsBreadcrumbRoute
  ElementsButtonRoute: typeof ElementsButtonRoute
  ElementsCheckboxRoute: typeof ElementsCheckboxRoute
  ElementsInputRoute: typeof ElementsInputRoute
  ElementsProgressRoute: typeof ElementsProgressRoute
  ElementsSelectRoute: typeof ElementsSelectRoute
  ElementsSliderRoute: typeof ElementsSliderRoute
  ElementsSparkLineRoute: typeof ElementsSparkLineRoute
  ElementsSwitchRoute: typeof ElementsSwitchRoute
  ElementsToasterRoute: typeof ElementsToasterRoute
  ElementsTooltipRoute: typeof ElementsTooltipRoute
  ElementsTypographyRoute: typeof ElementsTypographyRoute
  ExperimentalBeamBlockersControlRoute: typeof ExperimentalBeamBlockersControlRoute
  ExperimentalCameraControlRoute: typeof ExperimentalCameraControlRoute
  ExperimentalOphydControlRoute: typeof ExperimentalOphydControlRoute
  ExperimentalPeriodicTableRoute: typeof ExperimentalPeriodicTableRoute
  ExperimentalPrefectFlowTableRoute: typeof ExperimentalPrefectFlowTableRoute
  ExperimentalTextLogRoute: typeof ExperimentalTextLogRoute
  ExperimentalUnitsFieldRoute: typeof ExperimentalUnitsFieldRoute
  LayoutAccordionRoute: typeof LayoutAccordionRoute
  LayoutBoxRoute: typeof LayoutBoxRoute
  LayoutCardRoute: typeof LayoutCardRoute
  LayoutCollapsibleRoute: typeof LayoutCollapsibleRoute
  LayoutGridRoute: typeof LayoutGridRoute
  LayoutSheetRoute: typeof LayoutSheetRoute
  LayoutStackRoute: typeof LayoutStackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout/stack': {
      id: '/layout/stack'
      path: '/layout/stack'
      fullPath: '/layout/stack'
      preLoaderRoute: typeof LayoutStackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout/sheet': {
      id: '/layout/sheet'
      path: '/layout/sheet'
      fullPath: '/layout/sheet'
      preLoaderRoute: typeof LayoutSheetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout/grid': {
      id: '/layout/grid'
      path: '/layout/grid'
      fullPath: '/layout/grid'
      preLoaderRoute: typeof LayoutGridRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout/collapsible': {
      id: '/layout/collapsible'
      path: '/layout/collapsible'
      fullPath: '/layout/collapsible'
      preLoaderRoute: typeof LayoutCollapsibleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout/card': {
      id: '/layout/card'
      path: '/layout/card'
      fullPath: '/layout/card'
      preLoaderRoute: typeof LayoutCardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout/box': {
      id: '/layout/box'
      path: '/layout/box'
      fullPath: '/layout/box'
      preLoaderRoute: typeof LayoutBoxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout/accordion': {
      id: '/layout/accordion'
      path: '/layout/accordion'
      fullPath: '/layout/accordion'
      preLoaderRoute: typeof LayoutAccordionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experimental/units-field': {
      id: '/experimental/units-field'
      path: '/experimental/units-field'
      fullPath: '/experimental/units-field'
      preLoaderRoute: typeof ExperimentalUnitsFieldRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experimental/text-log': {
      id: '/experimental/text-log'
      path: '/experimental/text-log'
      fullPath: '/experimental/text-log'
      preLoaderRoute: typeof ExperimentalTextLogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experimental/prefect-flow-table': {
      id: '/experimental/prefect-flow-table'
      path: '/experimental/prefect-flow-table'
      fullPath: '/experimental/prefect-flow-table'
      preLoaderRoute: typeof ExperimentalPrefectFlowTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experimental/periodic-table': {
      id: '/experimental/periodic-table'
      path: '/experimental/periodic-table'
      fullPath: '/experimental/periodic-table'
      preLoaderRoute: typeof ExperimentalPeriodicTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experimental/ophyd-control': {
      id: '/experimental/ophyd-control'
      path: '/experimental/ophyd-control'
      fullPath: '/experimental/ophyd-control'
      preLoaderRoute: typeof ExperimentalOphydControlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experimental/camera-control': {
      id: '/experimental/camera-control'
      path: '/experimental/camera-control'
      fullPath: '/experimental/camera-control'
      preLoaderRoute: typeof ExperimentalCameraControlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experimental/beam-blockers-control': {
      id: '/experimental/beam-blockers-control'
      path: '/experimental/beam-blockers-control'
      fullPath: '/experimental/beam-blockers-control'
      preLoaderRoute: typeof ExperimentalBeamBlockersControlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/typography': {
      id: '/elements/typography'
      path: '/elements/typography'
      fullPath: '/elements/typography'
      preLoaderRoute: typeof ElementsTypographyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/tooltip': {
      id: '/elements/tooltip'
      path: '/elements/tooltip'
      fullPath: '/elements/tooltip'
      preLoaderRoute: typeof ElementsTooltipRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/toaster': {
      id: '/elements/toaster'
      path: '/elements/toaster'
      fullPath: '/elements/toaster'
      preLoaderRoute: typeof ElementsToasterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/switch': {
      id: '/elements/switch'
      path: '/elements/switch'
      fullPath: '/elements/switch'
      preLoaderRoute: typeof ElementsSwitchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/spark-line': {
      id: '/elements/spark-line'
      path: '/elements/spark-line'
      fullPath: '/elements/spark-line'
      preLoaderRoute: typeof ElementsSparkLineRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/slider': {
      id: '/elements/slider'
      path: '/elements/slider'
      fullPath: '/elements/slider'
      preLoaderRoute: typeof ElementsSliderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/select': {
      id: '/elements/select'
      path: '/elements/select'
      fullPath: '/elements/select'
      preLoaderRoute: typeof ElementsSelectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/progress': {
      id: '/elements/progress'
      path: '/elements/progress'
      fullPath: '/elements/progress'
      preLoaderRoute: typeof ElementsProgressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/input': {
      id: '/elements/input'
      path: '/elements/input'
      fullPath: '/elements/input'
      preLoaderRoute: typeof ElementsInputRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/checkbox': {
      id: '/elements/checkbox'
      path: '/elements/checkbox'
      fullPath: '/elements/checkbox'
      preLoaderRoute: typeof ElementsCheckboxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/button': {
      id: '/elements/button'
      path: '/elements/button'
      fullPath: '/elements/button'
      preLoaderRoute: typeof ElementsButtonRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/breadcrumb': {
      id: '/elements/breadcrumb'
      path: '/elements/breadcrumb'
      fullPath: '/elements/breadcrumb'
      preLoaderRoute: typeof ElementsBreadcrumbRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements/badge': {
      id: '/elements/badge'
      path: '/elements/badge'
      fullPath: '/elements/badge'
      preLoaderRoute: typeof ElementsBadgeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/zod-pydantic-analogy': {
      id: '/docs/zod-pydantic-analogy'
      path: '/docs/zod-pydantic-analogy'
      fullPath: '/docs/zod-pydantic-analogy'
      preLoaderRoute: typeof DocsZodPydanticAnalogyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/mui-migration': {
      id: '/docs/mui-migration'
      path: '/docs/mui-migration'
      fullPath: '/docs/mui-migration'
      preLoaderRoute: typeof DocsMuiMigrationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/getting-started': {
      id: '/docs/getting-started'
      path: '/docs/getting-started'
      fullPath: '/docs/getting-started'
      preLoaderRoute: typeof DocsGettingStartedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/component-creation': {
      id: '/docs/component-creation'
      path: '/docs/component-creation'
      fullPath: '/docs/component-creation'
      preLoaderRoute: typeof DocsComponentCreationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/radio-group': {
      id: '/components/radio-group'
      path: '/components/radio-group'
      fullPath: '/components/radio-group'
      preLoaderRoute: typeof ComponentsRadioGroupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/ophyd-monitor': {
      id: '/components/ophyd-monitor'
      path: '/components/ophyd-monitor'
      fullPath: '/components/ophyd-monitor'
      preLoaderRoute: typeof ComponentsOphydMonitorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/form': {
      id: '/components/form'
      path: '/components/form'
      fullPath: '/components/form'
      preLoaderRoute: typeof ComponentsFormRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/code-block': {
      id: '/components/code-block'
      path: '/components/code-block'
      fullPath: '/components/code-block'
      preLoaderRoute: typeof ComponentsCodeBlockRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/chart-xy': {
      id: '/components/chart-xy'
      path: '/components/chart-xy'
      fullPath: '/components/chart-xy'
      preLoaderRoute: typeof ComponentsChartXyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/chart-histogram': {
      id: '/components/chart-histogram'
      path: '/components/chart-histogram'
      fullPath: '/components/chart-histogram'
      preLoaderRoute: typeof ComponentsChartHistogramRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/chart-bar': {
      id: '/components/chart-bar'
      path: '/components/chart-bar'
      fullPath: '/components/chart-bar'
      preLoaderRoute: typeof ComponentsChartBarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/calendar': {
      id: '/components/calendar'
      path: '/components/calendar'
      fullPath: '/components/calendar'
      preLoaderRoute: typeof ComponentsCalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/alert-dialog': {
      id: '/components/alert-dialog'
      path: '/components/alert-dialog'
      fullPath: '/components/alert-dialog'
      preLoaderRoute: typeof ComponentsAlertDialogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/alert': {
      id: '/components/alert'
      path: '/components/alert'
      fullPath: '/components/alert'
      preLoaderRoute: typeof ComponentsAlertRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComponentsAlertRoute: ComponentsAlertRoute,
  ComponentsAlertDialogRoute: ComponentsAlertDialogRoute,
  ComponentsCalendarRoute: ComponentsCalendarRoute,
  ComponentsChartBarRoute: ComponentsChartBarRoute,
  ComponentsChartHistogramRoute: ComponentsChartHistogramRoute,
  ComponentsChartXyRoute: ComponentsChartXyRoute,
  ComponentsCodeBlockRoute: ComponentsCodeBlockRoute,
  ComponentsFormRoute: ComponentsFormRoute,
  ComponentsOphydMonitorRoute: ComponentsOphydMonitorRoute,
  ComponentsRadioGroupRoute: ComponentsRadioGroupRoute,
  DocsComponentCreationRoute: DocsComponentCreationRoute,
  DocsGettingStartedRoute: DocsGettingStartedRoute,
  DocsMuiMigrationRoute: DocsMuiMigrationRoute,
  DocsZodPydanticAnalogyRoute: DocsZodPydanticAnalogyRoute,
  ElementsBadgeRoute: ElementsBadgeRoute,
  ElementsBreadcrumbRoute: ElementsBreadcrumbRoute,
  ElementsButtonRoute: ElementsButtonRoute,
  ElementsCheckboxRoute: ElementsCheckboxRoute,
  ElementsInputRoute: ElementsInputRoute,
  ElementsProgressRoute: ElementsProgressRoute,
  ElementsSelectRoute: ElementsSelectRoute,
  ElementsSliderRoute: ElementsSliderRoute,
  ElementsSparkLineRoute: ElementsSparkLineRoute,
  ElementsSwitchRoute: ElementsSwitchRoute,
  ElementsToasterRoute: ElementsToasterRoute,
  ElementsTooltipRoute: ElementsTooltipRoute,
  ElementsTypographyRoute: ElementsTypographyRoute,
  ExperimentalBeamBlockersControlRoute: ExperimentalBeamBlockersControlRoute,
  ExperimentalCameraControlRoute: ExperimentalCameraControlRoute,
  ExperimentalOphydControlRoute: ExperimentalOphydControlRoute,
  ExperimentalPeriodicTableRoute: ExperimentalPeriodicTableRoute,
  ExperimentalPrefectFlowTableRoute: ExperimentalPrefectFlowTableRoute,
  ExperimentalTextLogRoute: ExperimentalTextLogRoute,
  ExperimentalUnitsFieldRoute: ExperimentalUnitsFieldRoute,
  LayoutAccordionRoute: LayoutAccordionRoute,
  LayoutBoxRoute: LayoutBoxRoute,
  LayoutCardRoute: LayoutCardRoute,
  LayoutCollapsibleRoute: LayoutCollapsibleRoute,
  LayoutGridRoute: LayoutGridRoute,
  LayoutSheetRoute: LayoutSheetRoute,
  LayoutStackRoute: LayoutStackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
